#!/usr/bin/env coco
`#!/usr/bin/env node`

optimist = require "optimist"
    .usage "Transform a JinJS formatted file or stdin to a javascript function\n or execute it directly with a given context.\nUsage: $0 [options] file\n       $0 [options]"
    .boolean "help"
    .alias "help", "h"
    .alias "filter_exp", "f"
    .alias "require_exp", "r"
    .alias "util_exp", 'u'
    .alias "context", "c"
    .alias "cocontext", "t"
    .describe 'context', "Give a JSON object as context"
    .describe 'cocontext', "Give a Coco object as context"
    .describe "help" "Show this help"
argv = optimist.argv

fs = require "fs"
sys = require "util"
{ defaultEnvironment } = require "./environment"

# If help, show it then exit.
if argv.help
    console.log optimist.help()
    process.exit 0

defaultEnvironment.require_exp = argv.require_exp ? "require"

function compile (string)
    return defaultEnvironment.getTemplateSourceFromString string

if argv.context
    context = eval "obj = #{argv.context ? '{}'};";
if argv.cocontext
    str = "obj = #{require "coco" .compile argv.cocontext, bare: true}"
    context = eval str

if context
    defaultEnvironment.filter_exp = "require('./filters')"

function result (data)
    if not context
        sys.print data
    else
        m = eval "(function(){#{data} return exports;})()"
        sys.print m.render context


if argv._.length > 0
    # Open all the files and transform them to JS functions.
    # This is actually not so useful to have many since the created
    # variables are immediately lost. This will be useful with a context though...
    for file of argv._
        (err, data) <- fs.readFile file, 'utf-8', ...
        if err
            console.warn err.message
            return
        result compile data
else
    process.stdin.resume ()
    process.stdin.setEncoding "utf-8"

    # Read our file from stdin
    data = ""
    process.stdin.on "data", (chunk) ->
        data += chunk

    # When read, process it.
    <- process.stdin.on "end"
    result (compile data)

