
->
    compilation_ctx = arguments[2] ? {}
    compilation_ctx.filters ?= {}
    compilation_ctx.filters_used ?= {}

    make_filter = (expression, filters) ->
        res = expression
        for f of filters
            args = ""
            args = ", #{f.args}" if f.args

            res = "#{f.name}.call($$,#{res}#{args})"

        return res

    # Tokens we don't want to encounter as variables
    reserved_words = [ "abstract", "as", "boolean", "break", "byte", "case", "catch", "char", "class", "continue", "const", "debugger", "default", "delete", "do", "double", "else", "enum", "export", "extends", "false", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "is", "long", "namespace", "native", "new", "null", "package", "private", "protected", "public", "return", "short", "static", "switch", "synchronized", "this", "throw", "throws", "transient", "true", "try", "typeof", "use", "var", "void", "volatile", "while", "with" ]

expression
    = space? t:ternary_operator space? -> 
        return t
    / space? -> return ''

ternary_operator
    = p:operation QUESTION_MARK e1:ternary_operator COLON e2:ternary_operator -> return "(#{p} ? #{e1} : #{e2})"
    / operation

operation
    = u:unary p:expression -> return "#{u}#{p}" 
    / p:filter_expression o:binary s:operation -> return "#{p}#{o}#{s}" 
    / p:filter_expression IN s:operation -> return "__in(#{p}, #{s})" 
    / p:filter_expression o:post_unary -> return "#{p}#{o}" 
    / filter_expression

filter_expression
    = expr:member_expression f:filter_rec -> return make_filter expr, f 
    / member_expression

filter_rec
    = lit:filter_literal r:filter_rec -> return [].concat lit, r 
    / filter_literal

filter_literal
    = PIPE name:filter_name LPAREN args:call_arguments? RPAREN -> return [name: name, args: args] 
    / PIPE name:filter_name -> return [name: name] 

call_arguments
    = e:expression COMMA c:call_arguments -> return "#{e}, #{c}" 
    / expression

function_call
    = LPAREN args:call_arguments? RPAREN -> return "(#{args})"

function_call_rec
    # So that we can do f()()()
    = f:function_call rec:function_call_rec -> return f + rec
    # This rule is to allow for fun().member, fun().member()()()
    / f:function_call DOT member:ic_member_expression_rec -> return "#{f}.#{member}"
    # Allowing ()[a]
    / f:function_call a:array_indexing_rec -> return f + a
    / function_call

array_index
    # When indexing, can't leave []
    = LBRACKET contents:call_arguments RBRACKET -> return "[#{contents}]"

array_indexing_rec
    # [a][b]
    = a:array_index rec:array_indexing_rec -> return a + rec
    # [a].toto
    / a:array_index DOT member:ic_member_expression_rec -> return "#{a}.#{member}"
    # [a]()
    / a:array_index f:function_call_rec -> return a + f
    / array_index

member_expression
    = p:ooc_primary_expression DOT i:ic_member_expression_rec -> return p + "." + i 
    / p:ooc_primary_expression arr:array_indexing_rec  -> return "#{p}#{arr}" 
    / expr:ooc_primary_expression f:function_call_rec -> return "#{expr}#{f}" 
    / ooc_primary_expression

ooc_primary_expression
    = primary_expression
    / i:primary_identifier -> return i

ic_member_expression_rec
    = xp:ic_member_expression DOT rec:ic_member_expression_rec -> return "#{xp}#{rec}"
    / ic_member_expression

# In context member expression : no escaping with $$
ic_member_expression
    = p:ic_primary_expression DOT i:ic_member_expression -> return p + "." + i 
    / p:ic_primary_expression arr:array_indexing_rec -> return "#{p}#{arr}" 
    / expr:ic_primary_expression f:function_call_rec -> return "#{expr}#{f}" 
    / ic_primary_expression

ic_primary_expression
    = primary_expression
    / i:identifier -> return i

primary_expression
    = special_value
    / object_literal
    / array_literal
    / number
    / string
    / regexp
    / LPAREN e:expression RPAREN -> return "(#{e})"

object_literal
    = LBRACE args:object_arguments? RBRACE -> return "{#{if args then " " + args + " " else ''}}"

object_arguments
    = a:object_argument COMMA args:object_arguments -> return "#{a}, #{args}" 
    / object_argument

object_argument
    = i:identifier COLON e:expression -> return "#{i}: #{e}" 
    / s:string COLON e:expression -> return "#{s}: #{e}" 

array_literal
    = LBRACKET args:call_arguments? RBRACKET -> return "[#{args}]" 

identifier
    = first:[$a-zA-Z_] rest:[$a-zA-Z_0-9]* -> 
        ident = "#{first}#{if rest then rest.join "" else ""}"
        if ident of reserved_words
            throw new Error "can't use '#{ident}' as a variable name"
        return ident

/* Used for any variable of function name */
primary_identifier
    = ident:identifier -> return "$$.#{ident}"

/* Used for filters 
*/
filter_name
    = ident:filter_identifier ->
        ident = \$ + ident
        filters = compilation_ctx.filters

        if not filters[ident]
            throw new Error "No such filter: #ident"

        if filters[ident].alias
            ident = filters[ident].alias

        for id of filters[ident].dependencies ? []
            compilation_ctx.filters_used[id] = filters[id]

        compilation_ctx.filters_used[ident] = filters[ident]
        return ident

filter_identifier
    = first:[_a-zA-Z] next:[_a-zA-Z0-9]* -> return "#{first}#{if next then next.join "" else ""}"

number
    = f:[0-9]+ d:"." s:[0-9]+ -> return "#{f.join ""}#{d}#{s.join ""}" 
    / n:[0-9]+ -> return "#{n.join ""}" 
    / MINUS n:number -> return "-#n"

string
    = space? "'" sglcnt:single_quoted_contents? "'" space? -> return "'#{sglcnt}'" 
    / space? '"' dblcnt:double_quoted_contents? '"' space? -> return "\"#{dblcnt}\"" 

regexp
    # \u002F is forward slash but it messes up syntax highlighting. 
    = space? "\u002F" regcnt:regexp_contents? "\u002F" modifs:([a-z]+)? space? -> return "/#{regcnt}/#{if modifs then modifs.join "" else ""}"

single_quoted_contents
    = s1:single_quoted_terminal s2:single_quoted_contents -> return s1 + s2 
    / single_quoted_terminal

single_quoted_terminal
    = "\\'"
    / [^\']

double_quoted_contents
    = s1:double_quoted_terminal s2:double_quoted_contents -> return s1 + s2 
    / double_quoted_terminal

double_quoted_terminal
    = '\\"'
    / [^\"]

regexp_contents
    = s1:regexp_terminal s2:regexp_contents -> return s1 + s2 
    / regexp_terminal

regexp_terminal
    = "\\/"
    / [^/]


space
    = [\t\n\r ]+ -> return " " 

MINUS
    = space? "-" space? -> return "-"
COMMA
    = space? "," space? -> return "," 
COLON
    = space? ":" space? -> return ":" 
QUESTION_MARK
    = space? "?" space? -> return "?" 
LPAREN
    = space? "(" space? -> return "(" 
RPAREN
    = space? ")" space? -> return ")" 
LBRACE
    = space? '{' space? -> return "\u007B" 

RBRACE
    = space? '}' space? -> return "\u007D" 

LBRACKET
    = space? "[" space? -> return "[" 

RBRACKET
    = space? "]" space? -> return "]" 

PIPE
    = space? "|" -> return "|" 
DOT
    = space? "." space? -> return "." 
IN
    = space? "in" space? -> return " in " 
ASSIGN
    = space? "=" space? -> return " = " 

unary
    = space? op:UNARY_OPERATOR space? -> return "#{op} " 

UNARY_OPERATOR
    = "!"
    / "not" -> return "!" 
    / "~"
    / "++"
    / "--"
    / "typeof"
    / "void"
    / "new"
    / "delete"

post_unary
    = space? op:POST_UNARY_OPERATOR space? -> return " " + op 

POST_UNARY_OPERATOR
    = "++"
    / "--"

binary
    # FIXME will probably need to make it so that the textual binary
    # operators can have not only space but also parentheses.
    = space? op:TEXT_BINARY_OPERATOR space? ->
        return " #{op} " 

    / space? op:BINARY_OPERATOR space? -> return " #{op} "

TEXT_BINARY_OPERATOR
    = "instanceof"
    / "and" -> return "&&" 
    / "or" -> return "||" 

BINARY_OPERATOR
    = ">>>"
    / "==="
    / "!=="
    / "=="
    / "!="
    / ">="
    / "<="
    / "&&"
    / "||"
    / "<<"
    / ">>"
    / "+="
    / "-="
    / "%="
    / "\u002F="
    / "*="
    / "="
    / "|"
    / "\u002F"
    / "^"
    / "&"
    / "|"
    / "+"
    / ">"
    / "<"
    / "%"
    / "-"
    / "*"

NEW
    = space? "new" space? -> return "new" 

special_value
    = space? s:SPECIAL space? -> return s 

SPECIAL
    = "false"
    / "true"
    / "this"
    / "void"
    / "null"
    / "undefined"


#######################################################################
##
##  The following rules are used by the Node::compile method to parse their
##      contents more elegantly than by using regexps.

tag_for
    = key:identifier IN exp:expression -> 
        return key: key, condition: exp 

    / key:identifier COMMA value:identifier IN exp:expression -> 
        return key: key, value: value, condition: exp 

tag_let
    = variable_name:identifier ASSIGN expression:expression -> 
        return variable_name: variable_name, expression: expression 

tag_macro
    = function_name:identifier LPAREN args:macro_call_arguments? RPAREN -> 
        return function_name:function_name, args: if args == '' then [] else args 

macro_call_arguments
    = first:macro_argument other_args:(COMMA arg:macro_argument { return arg; })* ->
        res = [first] + (arg for arg of other_args)
        return res

macro_argument
    = name:identifier ASSIGN exp:expression -> 
        return { name, default_value: exp }

    / name:identifier ->  return { name }

tag_block
    = space? first_letter:[a-zA-Z_] next_letters:[-a-zA-Z0-9_]* space? -> 
        return "#{first_letter}#{if next_letters then next_letters.join "" else ''}" 

tag_import
    = exp:expression space? "import" space? args:variable_list ctx:(space "with" space "context")? -> return template: exp, variables: args, with_context: ctx !== ""
    / exp:expression space? "as" space? id: identifier ctx:(space "with" space "context")? -> return template: exp, as_name: id, with_context: ctx !== ""

variable_list
    = id:identifier COMMA list:variable_list -> 
        list.push id
        return list
    / id:identifier -> return [id]

## END
