
{ parse:make_expression } = require \./expression

make_parse_rule = (rule_name) ->
    return (contents, ctx) -> make_expression contents, rule_name, ctx

parse_for = make_parse_rule \tag_for
parse_let = make_parse_rule \tag_let
parse_macro = make_parse_rule \tag_macro
parse_extends = make_expression
parse_block = make_parse_rule \tag_block
parse_import = make_parse_rule \tag_import
parse_string = make_parse_rule \string

function trim (string)
    return if not string then "" else string.replace(/^\s*|\s*$/, '')

/**
 *  @param str  a string
 *  @returns    an escaped string suitable to be quoted.
 */
function escape (str)
    str.replace /\\/g, '\\\\' # Backslash escaping
        .replace /["']/g, (str) -> # Quote escaping
            "\\#{str}"
        .replace /\n/g, '\\n' # New line escaping
        .replace /\r/g, '\\r' # Carriage return
        .replace /\t/g, '\\t' # Carriage return

function template_expr_is_string (expr)
    try
        parse_string expr
        return true
    catch e
        return false

/**
 *
 */
class Node
    ({ @contents }:specs ? {}) ->

    compile: function
        throw new Error "This function should never be called."
    ind: function (opts)
        opts.__indent__ ?= 0
        opts.__indent__ = opts.__indent__ + 1
        ind = opts.__indent__ * 4
        return "\n" + (" " * ind)
    ded: function (opts)
        opts.__indent__ ?= 1
        opts.__indent__ = opts.__indent__ - 1
        ind = opts.__indent__ * 4
        return "\n" + " " * ind
    cur: function (opts)
        ind = (opts.__indent__ ? 0) * 4
        return "\n" + " " * ind
/**
 *
 */
class NodeBasic extends Node
    (specs) -> super ...

    compile: function (opts, ctx)
        "_res += '#{escape @contents}';"

    append: function (contents)
        @contents += contents

class NodeComment extends Node
    ({ @contents ? "" }) ->

    compile: function (opts, ctx)
        "/*#{@contents}*/"

/**
 *  A collection of Nodes.
 */
class NodeList extends Node
    (specs) ->
        @nodes = []
        super ...

    push: function (node)
        if not node?
            return

        if typeof node == \string # node is a String
            last_node = @nodes[@nodes.length - 1]
            if last_node instanceof NodeBasic
                last_node.append node
            else
                @nodes.push new NodeBasic contents: node
        else
            @nodes.push node

    compile: function (opts, ctx)
        ctx ?= {}
        res = ""
        for node of @nodes
            res += node.compile opts, ctx
        return res

/**
 *
 */
class NodePrint extends Node
    (specs) -> super ...

    compile: function (opts, ctx)
        return "_res += ((_ref = #{make_expression @contents, ctx}) !== undefined && _ref !== null ? _ref : '').toString();"

class NodeTag extends Node
    @tag = \__tag__

    (specs) -> super ...

    compile: function
        throw new JinJSUnimplementedException "The NodeTag is not meant to be used !"

    toString: function
        return "Node: #{this.constructor.displayName}"

/**
 *
 */
class NodeExtends extends NodeTag
    @tag = \extends

    (specs) -> super ...

    compile: function (opts, ctx)
        opts.'extends' = true
        tpl_name = parse_extends @contents, opts
        if template_expr_is_string tpl_name
            return "__extends__ = require(#{tpl_name});"
        else
            return """__extends__ = #{tpl_name};
                if (__extends__ === null || __extends__ === undefined) throw new Error ('Cant extend a null template.');"""

class NodeImport extends NodeTag
    @tag = \import
    (specs) -> super ...

    compile: function (opts, ctx)
        { tpl, as, imports, with_context } = parse_import

        opts.\clone = true # We're going to need the clone function

        result = """(function(){
                var __new_ctx = #{if not with_context then '{}' else '__import({}, $$)'};
                // __new_ctx now gets populated with the new exported variables.
                require(#{tpl}).render(__new_ctx);
            """

        if as # Importing the whole module.
            result += "#{common}$$.#{as} = __new_ctx;
            "

        else # List of imported elements from the context.
            result += """var names = ['#{imports.join "', '"}'];
                for (var i = 0; i < names.length; i++) {
                    $$[names[i]] = __new_ctx[names[i]];
                }
            """


        result += "})();"
        return result

class NodeFromImport extends NodeImport
    @tag = \from
    (specs) -> super ...

/**
 *
 */
class NodeInclude extends NodeTag
    @tag = \include

    (specs) -> super ...

    compile: function (opts, ctx)
        tpl_name = parse_extends @contents, opts

        if template_expr_is_string tpl_name
            tpl_exp = "require(#{tpl_name})"
        else
            tpl_exp = tpl_name

        return "_res += (#{tpl_exp}).render($$);"

class NodeImport extends NodeTag
    @tag = \import
    (specs) -> super ...

    compile: function (opts, ctx)
        { template, as_name, variables, with_context } = parse_import @contents, ctx

        opts.\clone = true # We're going to need the clone function

        if template_expr_is_string template
            tpl_exp = "require(#{template})"
        else
            tpl_exp = template

        result = "(function(){ "

        if with_context
            result += """var __new_ctx = __import({}, $$);
                // __new_ctx now gets populated with the new exported variables.
                (#{tpl_exp}).render(__new_ctx);
            """
        else
            result += "var __new_ctx = (#{tpl_exp})._cached_ctx();"

        if as_name # Importing the whole module.
            result += "$$.#{as_name} = __new_ctx;
            "

        else # List of imported elements from the context.
            result += """var names = ['#{variables.join "', '"}'];
                for (var i = 0; i < names.length; i++) {
                    $$[names[i]] = __new_ctx[names[i]];
                }
            """


        result += "})();"
        return result

class NodeFromImport extends NodeImport
    @tag = \from
    (specs) -> super ...

class NodeAbspath extends NodeTag
    @tag = \abspath
    (specs) -> super ...
    compile: function (opts, ctx)
        path = parse_string @contents, ctx
        return "_res += _require('path').join(__dirname, #{path});"
/**
 *
 */
class NodeLet extends NodeTag
    @tag = \let

    (specs) -> super ...

    compile: function (opts, ctx)
        { variable_name, expression } = parse_let @contents, ctx

        ctx[variable_name] = true # The variable name is now accessible to the rest of the template.
        return res = "var #{variable_name} = ($$.#{variable_name} = #{expression});"

class NodeDo extends NodeTag
    @tag = \do
    (specs) -> super ...

    compile: function (opts, ctx)
        return "#{make_expression @contents, ctx};"

/**
 */
class NodeTagContainer extends NodeList
    (specs) ->
        super ...
        @child_node = specs.child_node

    child_code: function (opts, ctx)
        ind = 0
        return ((@child_node?.compile opts, ctx) ? "").replace /^/g, ->
            ind := ind + 1
            return if ind == 1 then "" else "    "

/**
 *
 */
class NodeMacro extends NodeTagContainer
    @tag = \macro
    @until = \endmacro

    (specs) -> super ...

    init_defaults: function (opts, args)
        res = ""
        for a of args
            if a.default_value
                res += "#{a.name} = (#{a.name} === undefined) ? (#{a.default_value}) : #{a.name};"
        return res

    compile: function (opts, ctx)
        { args, function_name } = parse_macro @contents, ctx

        # Add the last param, which is *always* the caller block.
        args.push({name: "caller", default_value: "(function(){ return \"\"; })"})

        backup = []
        argcode = []
        argendcode = []

        for a of args
            backup.push "__#{a.name} = #{a.name}"
            argcode.push "$$.#{a.name} = #{a.name}"
            argendcode.push "if (__#{a.name} !== undefined) $$.#{a.name} = __#{a.name};"

        if args
            backup = "var #{backup.join ","};"
            argcode = "#{argcode.join ","};"
            argendcode = argendcode.join " "

        res = """function #{function_name}(#{(a.name for a of args).join ", "}) {
                    var _res = '';
                    #{@init_defaults opts, args}
                    #backup
                    #argcode
                    #{@child_code opts, ctx}
                    #argendcode
                    return _res;
                }
                $$.#{function_name} = #{function_name};
                """
        return res

class NodeCall extends NodeTagContainer
    @tag = \call
    @until = \endcall
    @call_re = /([a-zA-Z$_0-9]+)\s*\(\s*(.*)\s*\)\s*/

    (specs) -> super ...

    compile: function (opts, ctx)
        m = @contents.match(NodeCall.call_re)
        if not m then throw new Error("call tag is malformed")

        fname = m[1]
        args = m[2]
        args = (a.replace(/^\s*|\s*$/g, '') if a for a of args.split(","))

        callerblock = """(function () {
            var _res = '';
            #{@child_code opts, ctx}
            return _res;
        })"""
        args.push(callerblock)
        args = args.join(", ")

        thecall = "_res += #fname(#args);"

        return thecall
/**
 *
 */
class NodeBlock extends NodeTagContainer
    @tag = \block
    @until = \endblock

    (specs) -> super ...

    compile: function (opts, ctx)
        block_name = parse_block @contents, ctx
        opts.blocks ?= {}

        # Output the block expression into the block
        indent = opts.__indent__
        opts.__indent__ = 4
        opts.blocks[block_name] = "#{@child_code opts, ctx}"
        opts.__indent__ = indent

        return """// Adding the current block as the super of the currently defined block with the same name.
            if (_b['#{block_name}'] !== undefined) {
                _b['#{block_name}'] = (function (original) {
                    return function ($$) {
                        var prevsuper = $$.super;
                        $$.super = function() {
                            return __block_#{block_name}($$);
                        };
                        var res = original($$);
                        if (prevsuper !== undefined)
                            $$.super = prevsuper;
                        return res; };
                })(_b['#{block_name}']);
            } else { _b['#{block_name}'] = __block_#{block_name}; }
            if (__extends__ === null) _res += _b['#{block_name}']($$);\n
        """



class NodeElse extends NodeTagContainer
    @tag = \else

    @parse = function (pd)
        return new NodeElse child_node: pd.child_node

    (specs) ->
        super ...

    compile: function (opts, ctx)
        res = "} else {"
        @ind opts
        res += "#{@child_code opts, ctx}"
        return res

class NodeElseIf extends NodeTagContainer
    @tag = \elseif
    @inside = elseif: NodeElseIf, else: NodeElse

    (specs) ->
        super ...

    compile: function (opts, ctx)
        if not trim @contents
            throw new Error "{% elseif <condition> %}: condition can't be empty."

        res = "} else if (#{make_expression @contents, ctx}) {"
        @ind opts
        res += "#{@child_code opts, ctx}"
        return res

class NodeElIf extends NodeTagContainer
    @tag = \elif
    @inside = elif: NodeElIf, else: NodeElse

    (specs) ->
        super ...

    compile: function (opts, ctx)
        if not trim @contents
            throw new Error "{% elif <condition> %}: condition can't be empty."

        res = "} else if (#{make_expression @contents, ctx}) {"
        @ind opts
        res += "#{@child_code opts, ctx}"
        return res


class NodeIf extends NodeTagContainer
    @tag = \if
    @until = \endif
    @inside = else: NodeElse, elseif: NodeElseIf, elif: NodeElIf

    (specs) ->
        super ...

    compile: function (opts, ctx)
        if not trim @contents
            throw new Error "{% if <condition> %}: condition can't be empty."

        res = """if (#{make_expression @contents, ctx}) {
            #{@child_code opts, ctx}
            #{super this, opts, ctx}
        }"""
        return res


class NodeElseFor extends NodeTagContainer
    @tag = \else
    @until = \endfor

    (specs) ->
        super ...

    compile: function (opts, ctx)
        # loop.index is not defined if we didn't enter the loop.
        res = "#{@child_code opts, ctx}"
        return res


class NodeAutoEscapeDummy extends NodeTagContainer
    @tag = \autoescape
    @until = \endautoescape

    (specs) ->
        super ...

    compile: function (opts, ctx)
        res = "#{@child_code opts, ctx}"
        return res


class NodeContinue extends NodeTag
    @tag = \continue

    (specs) ->
        super ...

    compile: function (opts, ctx)
        return "continue;"

class NodeBreak extends NodeTag
    @tag = \break

    (specs) ->
        super ...

    compile: function (opts, ctx)
        return "break;"

#   A Node that emulates the for () { } statement.
#
class NodeFor extends NodeTagContainer
    @tag = \for
    @until = \endfor
    @inside = else: NodeElseFor

    (specs) ->
        super ...

    compile: function (opts, ctx)
        { key, value, condition } = parse_for @contents, ctx

        # We want to include the __for function
        opts.forblock = true

        value = '' if not value # Iterating over an array.

        k = "$$['#key']"
        v = if value then "$$['#value']" else "null"
        l = "$$.loop"

        return """(function() {
            var _fref = #condition || [], _prev_loop = #l, _prev_key = #k, _prev_value = #v, k = null, v = null, i = 0, l = 0, x = null, last_v = null, last_k = null;
            #l = { };
            if (_fref instanceof Array) {
                l = _fref.length;
                for (i = 0; i < l; i++) {
                    #l.last = (i == l - 1);
                    #l.first = (i == 0);
                    #l.index0 = i;
                    #l.index = i + 1;
                    #k = _fref[i]; #{if value then "#v = i;" else ""}
                    #{@child_code opts, ctx}
                }
            } else {
                #l = { first: true, last: false };
                l = Object.keys(_fref).length;

                for (x in _fref) { if (_fref.hasOwnProperty(x)) {
                    #l.last = (i == l - 1);
                    #k = x;
                    #{if value then "#v = _fref[x];" else ""}
                    #l.index0 = i;
                    #l.index = i + 1;
                    #{@child_code opts, ctx}
                    i += 1;
                    #l.first = false;
                } }
            }
            if (#l.index == undefined) {
                #{super this, opts, ctx}
            }
            #l = _prev_loop; #k = _prev_key; #{if value then "#v = _prev_value;" else ""}
            })();
        """

exports <<< {
    NodeIf, NodeDo, NodeLet, NodeFor, NodeMacro, NodeList, NodeBasic,
    NodePrint, NodeComment, NodeExtends, NodeInclude, NodeImport, NodeFromImport,
    NodeContinue, NodeCall
    default_nodes: do
        \if : NodeIf
        \do : NodeDo
        \let : NodeLet
        \for : NodeFor
        \macro : NodeMacro
        \extends : NodeExtends
        \block : NodeBlock
        \include : NodeInclude
        \from : NodeFromImport
        \import : NodeImport
        \abspath : NodeAbspath
        \continue : NodeContinue
        \break : NodeBreak
        \call : NodeCall
        \autoescape : NodeAutoEscapeDummy
    }

