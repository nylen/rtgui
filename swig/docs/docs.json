{
  "section": "docs",
  "apiOptions": {
    "allowErrors": {
      "default": "false",
      "desc": "Default is <code>false</code>. Keeping this off will render all template parsing and compiling errors straight to the template output. If <code>true</code>, errors will be thrown straight to the Node.js process, potentially crashing your application."
    },
    "autoescape": {
      "default": "true",
      "desc": "Automatically escape all variable output. This is the default behavior and it is highly recommended to leave this on. For character conversion tables, see the <a href=\"#filters-escape\">escape filter</a>.",
      "values": {
        "true": "Will escape output safe for HTML.",
        "false": "Will not escape any output unless forced via the escape filter or autoescape tag.",
        "'js'": "Will escape output safe for JavaScript."
      }
    },
    "cache": {
      "default": "true",
      "desc": "Changing this to <code>false</code> will re-compile the template files for each request. It is recommended to leave this as <code>true</code> for production use."
    },
    "encoding": {
      "default": "'utf8'",
      "desc": "The character encoding for template files."
    },
    "filters": {
      "default": "{}",
      "desc": "Use this to set any custom filters and/or override any of the built-in filters. For more information on writing your own filters, see the <a href=\"#filters-custom\">custom filters guide</a>."
    },
    "root": {
      "default": "/",
      "desc": "The directory to search for templates. If a template passed to <code data-language=\"javascript\">swig.compileFile</code> is an absolute path (starts with /), Swig will not look in the template root. If passed an <code data-language=\"javascript\">array</code>, templates will be used by first-match per array index order."
    },
    "tags": {
      "default": "{}",
      "desc": "Use this to set any custom tags and/or override any of the built-in tags. For more information on writing your own tags, see the <a href=\"#tags-custom\">custom tags guide</a>."
    },
    "extensions": {
      "default": "{}",
      "desc": "Add library extensions that will be available to compiled templates. For more information, see the <a href=\"#tags-custom\">custom tags guide</a> on third party extensions."
    },
    "tzOffset": {
      "default": "0",
      "desc": "Sets a default timezone offset, in minutes from GMT. Setting this will make the <a href=\"#filters-date\">date filter</a> automatically convert dates parsed through the date filter to the appropriate timezone offset."
    }
  },
  "filters": {
    "add": {
      "title": "add(value)",
      "desc": "Adds the value to the variable. Strings that can be converted to integers will be summed, not concatenated.",
      "args": [
        {
          "name": "value",
          "type": "mixed",
          "desc": "The value to add to the variable before printing it to the page. Accepts any <code>array</code>, <code>object</code>, <code>number</code>, and <code>string</code>."
        }
      ]
    },
    "addslashes": {
      "title": "addslashes",
      "desc": "Returns a string with backslashes in front of characters that need to be quoted for database queries, etc."
    },
    "capitalize": {
      "title": "capitalize",
      "desc": "Capitalize the first character in the string."
    },
    "date": {
      "title": "date(format[, tzOffset])",
      "desc": "Convert a valid date into a format as specified. Mostly conforms to <a href=\"http://php.net/date\">php.net's date formatting</a>.",
      "args": [
        {
          "name": "format",
          "type": "string",
          "desc": "The format to convert the date to. See the date formatting table for formatting options."
        },
        {
          "name": "tzOffset",
          "optional": true,
          "type": "number",
          "desc": "The timezone offset in minutes from GMT to display the date in."
        }
      ],
      "inc": "docs/filters/date.html"
    },
    "default": {
      "title": "default(value)",
      "desc": "If the variable is <code>undefined</code>, <code>null</code>, or <code>false</code>, a default return value can be specified.",
      "args": [
        {
          "name": "value",
          "type": "mixed",
          "desc": "Fallback value if the variable is falsy."
        }
      ]
    },
    "e": {
      "title": "e",
      "desc": "Shortcut for <a href=\"#filters-escape\">escape</a>"
    },
    "escape": {
      "title": "escape([type])",
      "desc": "Force escape the output of the variable. Optionally use <code>e</code> as a shortcut filter name. This filter will be applied by default if <var>autoescape</var> is turned on.",
      "args": [
        {
          "name": "type",
          "optional": true,
          "type": "string",
          "desc": "If you pass the string <samp>js</samp> in as the type, output will be escaped so that it is safe for JavaScript execution."
        }
      ],
      "inc": "docs/filters/escape.html"
    },
    "first": {
      "title": "first",
      "desc": "Returns the first element of an array."
    },
    "join": {
      "title": "join(glue)",
      "desc": "If the value is an Array, you can join each value with a delimiter and return it as a string.",
      "args": [
        {
          "name": "glue",
          "type": "string",
          "desc": "Concatenation string to join each item in the array with."
        }
      ]
    },
    "json_encode": {
      "title": "json_encode([indent])",
      "desc": "Return a json-encoded string of the input.",
      "args": [
        {
          "name": "indent",
          "optional": true,
          "type": "number",
          "desc": "If greater than zero, the JSON will be pretty-printed using the number of spaces specified by the"
        }
      ]
    },
    "last": {
      "title": "last",
      "desc": "Returns the last element of an array."
    },
    "length": {
      "title": "length",
      "desc": "Return the <code>length</code> property of the input. If the input is an <code>object</code>, returns the number of keys on the object."
    },
    "lower": {
      "title": "lower",
      "desc": "Return the input in all lowercase letters."
    },
    "raw": {
      "title": "raw",
      "desc": "Forces the input to not be auto-escaped."
    },
    "replace": {
      "title": "replace(search, replace[, flags])",
      "desc": "Uses built-in JavaScript replace method. Provide a regular-expression or a string and a replacement string.",
      "args": [
        {
          "name": "search",
          "type": "string",
          "desc": "string or regular expression to find"
        },
        {
          "name": "replace",
          "type": "string",
          "desc": "string that will replace the matched parts from <var>search</var>"
        },
        {
          "name": "flags",
          "optional": true,
          "type": "string",
          "desc": "Regular expression flags. <a href=\"https://developer.mozilla.org/en/JavaScript/Guide/Regular_Expressions#Advanced_Searching_With_Flags\">[reference]</a>"
        }
      ]
    },
    "reverse": {
      "title": "reverse",
      "desc": "If the input value is an Array, this filter will reverse all items in the array."
    },
    "striptags": {
      "title": "striptags",
      "desc": "Strip all HTML/XML tags."
    },
    "title": {
      "title": "title",
      "desc": "Change the output to title-case: the first letter of every word will be uppercase, while all the rest will be lowercase."
    },
    "uniq": {
      "title": "uniq",
      "desc": "Produces a duplicate-free version of an input array."
    },
    "upper": {
      "title": "upper",
      "desc": "Change the output to all uppercase letters."
    },
    "url_encode": {
      "title": "url_encode",
      "desc": "Encode the ouput as a URI component."
    },
    "url_decode": {
      "title": "url_decode",
      "desc": "Decode the ouput as a URI component."
    }
  },
  "tags": {
    "extends": {
      "desc": "Makes the current template extend a parent template. This tag must be the first item in your template.",
      "args": {
        "file": {
          "types": ["string", "var"],
          "desc": "The path, relative to the template root, to use as the parent layout for the current file. Must be the first token of this file.<br><br>See <a href=\"#inheritance\">Template inheritance</a> for more information."
        }
      }
    },
    "block": {
      "desc": "Defines a block in a template that can be overridden by a template extending this one and/or will override the current template's parent template block of the same name.<br><br>See <a href=\"#inheritance\">Template inheritance</a> for more information.",
      "args": {
        "name": {
          "types": ["token"],
          "desc": "Name for the current block context. Must start with a letter and only include letters, numbers, and underscores."
        }
      }
    },
    "parent": {
      "desc": "Inject the content from the parent template's block of the same name into the current block.<br><br>See <a href=\"#inheritance\">Template inheritance</a> for more information."
    },
    "include": {
      "desc": "Includes a template in its place. The template is rendered within the current context.",
      "args": {
        "file": {
          "types": ["string", "var"],
          "desc": "The path, relative to the template root, to render into the current context."
        },
        "ignore missing": {
          "types": [],
          "desc": "Do not error if the file does not exist.",
          "optional": true
        },
        "with <var>x</var>": {
          "types": ["var"],
          "desc": "Set <var>x</var> to the root context object to pass to the rendering of the template. This should always be a key:value object.",
          "optional": true
        },
        "only": {
          "types": [],
          "desc": "Restrict the context of the template to those explicitly defined the the <var>with x</var> argument",
          "optional": true
        }
      },
      "inc": "docs/tags/include.html"
    },
    "raw": {
      "desc": "Stop token parsing within this tag. All content will be output as-is.",
      "inc": "docs/tags/raw.html"
    },
    "for": {
      "desc": "Loop over objects and arrays.",
      "args": {
        "x": {
          "types": ["token"],
          "desc": "Loop-accessible name for the current loop iteration's value."
        },
        "in": {
          "types": "token",
          "desc": "The literal token 'in' is a required token."
        },
        "y": {
          "types": ["var"],
          "desc": "Iterable object. Can be modified with filters as desired."
        }
      },
      "inc": "docs/tags/for.html"
    },
    "if": {
      "desc": "Conditional statements",
      "args": {
        "...": {
          "types": ["mixed"],
          "desc": "Accepts any valid JavaScript conditional statement, as well as some other human readable syntaxes."
        }
      },
      "inc": "docs/tags/if.html"
    },
    "autoescape": {
      "desc": "Change the current behavior of variable auto-escaping.",
      "args": {
        "on": {
          "types": ["token"],
          "desc": "Whether the content should be escaped (<samp>true</samp>) or not (<samp>false</samp>)."
        },
        "type": {
          "types": ["string"],
          "desc": "Escape type. One of <samp>html</samp> or <samp>js</samp>.",
          "default": "html",
          "optional": true
        }
      },
      "inc": "docs/tags/autoescape.html"
    },
    "set": {
      "desc": "Set a variable for re-use in the current context.",
      "args": {
        "name": {
          "types": ["token"],
          "desc": "Variable name to assign the value to."
        },
        "=": {
          "types": "token",
          "desc": "The literal equals sign is a required token."
        },
        "value": {
          "types": ["mixed"],
          "desc": "Value to apply to <var>name</var>."
        }
      },
      "inc": "docs/tags/set.html"
    },
    "macro": {
      "desc": "Create custom, reusable snippets within your templates.",
      "args": {
        "...": {
          "types": ["token"],
          "desc": "User defined."
        }
      },
      "inc": "docs/tags/macro.html"
    },
    "import": {
      "desc": "Allows you to import macros from another file directly into your current context.",
      "args": {
        "file": {
          "types": ["var", "string"],
          "desc": "The path, relative to the template root, to import macros from."
        },
        "as": {
          "types": "token",
          "desc": "The literal token 'as' is a required token."
        },
        "var": {
          "types": ["token"],
          "desc": "Context-accessible object name to assign the macros to."
        }
      },
      "inc": "docs/tags/import.html"
    },
    "filter": {
      "desc": "Apply a filter to an entire block of template.",
      "args": {
        "filter_name": {
          "types": ["token"],
          "desc": "Name of the filter to use."
        },
        "...": {
          "types": ["mixed"],
          "desc": "Accepts any number of arguments, will be passed to the filter."
        }
      },
      "inc": "docs/tags/filter.html"
    }
  }
}
